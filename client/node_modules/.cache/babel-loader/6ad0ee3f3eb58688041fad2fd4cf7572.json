{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mason\\\\Projects\\\\clozd_assignment\\\\client\\\\src\\\\App\\\\components\\\\DataTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport ReactPaginate from \"react-paginate\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport MTable from \"./MTable\";\nimport \"../styles/DataTable.css\";\n/*\r\n\r\n    NOTE: I got ideas of this Pagination code from https://blog.logrocket.com/4-ways-to-render-large-lists-in-react/   \r\n\r\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DataTable = ({\n  data\n}) => {\n  _s();\n\n  const [pagination, setPagination] = useState({\n    data: data,\n    offset: 0,\n    numberPerPage: 10,\n    pageCount: 0,\n    currentData: []\n  });\n  useEffect(() => {\n    setPagination(prevState => ({ ...prevState,\n      pageCount: prevState.data.length / prevState.numberPerPage,\n      //700\n      currentData: prevState.data.slice(pagination.offset, //10\n      pagination.offset + pagination.numberPerPage //20\n      )\n    }));\n  }, [pagination.numberPerPage, pagination.offset]);\n\n  const handlePageClick = event => {\n    const selected = event.selected;\n    const offset = selected * pagination.numberPerPage; //10\n\n    console.log(\"Offset in handle click: \" + offset);\n    setPagination({ ...pagination,\n      offset\n    }); // setOffset(offset1);\n\n    console.log(pagination);\n  };\n\n  return (\n    /*#__PURE__*/\n    // <div style={{ marginLeft: 100, marginRight: 100 }}>\n    //   <Table striped bordered hover size=\"sm\">\n    //     <thead>\n    //       <tr>\n    //         <th>#</th>\n    //         <th>Full Name</th>\n    //         <th>Email</th>\n    //         <th>Country</th>\n    //         <th>Profile</th>\n    //       </tr>\n    //     </thead>\n    //     <tbody>\n    //       {pagination.currentData &&\n    //         pagination.currentData.map((item, index) => (\n    //           <tr key={index}>\n    //             <td>{pagination.offset + (index + 1)}</td>\n    //             <td>{item.name.last + \", \" + item.name.first}</td>\n    //             <td>{item.email}</td>\n    //             <td>{item.location.city + \", \" + item.location.country}</td>\n    //             <td>\n    //               <Link\n    //                 to={{\n    //                   pathname: \"./Details\",\n    //                   state: { user: item },\n    //                 }}\n    //               >\n    //                 <Button variant=\"link\">Visit Profile</Button>\n    //               </Link>\n    //             </td>\n    //           </tr>\n    //         ))}\n    //     </tbody>\n    //   </Table>\n    //   <ReactPaginate\n    //     previousLabel={\"previous\"}\n    //     nextLabel={\"next\"}\n    //     breakLabel={\"...\"}\n    //     pageCount={pagination.pageCount}\n    //     marginPagesDisplayed={2}\n    //     pageRangeDisplayed={5}\n    //     onPageChange={handlePageClick}\n    //     containerClassName={\"pagination\"}\n    //     activeClassName={\"active\"}\n    //   />\n    // </div>\n    _jsxDEV(MTable, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(DataTable, \"MxOUyiuPV6vA6AIIhMvhuEBjMWE=\");\n\n_c = DataTable;\nexport default DataTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataTable\");","map":{"version":3,"sources":["C:/Users/mason/Projects/clozd_assignment/client/src/App/components/DataTable.js"],"names":["React","useState","useEffect","ReactPaginate","Button","Table","Link","MTable","DataTable","data","pagination","setPagination","offset","numberPerPage","pageCount","currentData","prevState","length","slice","handlePageClick","event","selected","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,iBAA9B;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAO,yBAAP;AAEA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AAC9B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC;AAC3CQ,IAAAA,IAAI,EAAEA,IADqC;AAE3CG,IAAAA,MAAM,EAAE,CAFmC;AAG3CC,IAAAA,aAAa,EAAE,EAH4B;AAI3CC,IAAAA,SAAS,EAAE,CAJgC;AAK3CC,IAAAA,WAAW,EAAE;AAL8B,GAAD,CAA5C;AAQAb,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,aAAa,CAAEK,SAAD,KAAgB,EAC5B,GAAGA,SADyB;AAE5BF,MAAAA,SAAS,EAAEE,SAAS,CAACP,IAAV,CAAeQ,MAAf,GAAwBD,SAAS,CAACH,aAFjB;AAEgC;AAC5DE,MAAAA,WAAW,EAAEC,SAAS,CAACP,IAAV,CAAeS,KAAf,CACXR,UAAU,CAACE,MADA,EACQ;AACnBF,MAAAA,UAAU,CAACE,MAAX,GAAoBF,UAAU,CAACG,aAFpB,CAEkC;AAFlC;AAHe,KAAhB,CAAD,CAAb;AAQD,GATQ,EASN,CAACH,UAAU,CAACG,aAAZ,EAA2BH,UAAU,CAACE,MAAtC,CATM,CAAT;;AAWA,QAAMO,eAAe,GAAIC,KAAD,IAAW;AACjC,UAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAvB;AACA,UAAMT,MAAM,GAAGS,QAAQ,GAAGX,UAAU,CAACG,aAArC,CAFiC,CAEmB;;AACpDS,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAA6BX,MAAzC;AACAD,IAAAA,aAAa,CAAC,EAAE,GAAGD,UAAL;AAAiBE,MAAAA;AAAjB,KAAD,CAAb,CAJiC,CAKjC;;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYb,UAAZ;AACD,GAPD;;AASA;AAAA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,YAAC,MAAD;AAAQ,MAAA,IAAI,EAAED;AAAd;AAAA;AAAA;AAAA;AAAA;AAhDF;AAkDD,CA/ED;;GAAMD,S;;KAAAA,S;AAgFN,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport { Button, Table } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport MTable from \"./MTable\";\r\nimport \"../styles/DataTable.css\";\r\n\r\n/*\r\n\r\n    NOTE: I got ideas of this Pagination code from https://blog.logrocket.com/4-ways-to-render-large-lists-in-react/   \r\n\r\n*/\r\nconst DataTable = ({ data }) => {\r\n  const [pagination, setPagination] = useState({\r\n    data: data,\r\n    offset: 0,\r\n    numberPerPage: 10,\r\n    pageCount: 0,\r\n    currentData: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    setPagination((prevState) => ({\r\n      ...prevState,\r\n      pageCount: prevState.data.length / prevState.numberPerPage, //700\r\n      currentData: prevState.data.slice(\r\n        pagination.offset, //10\r\n        pagination.offset + pagination.numberPerPage //20\r\n      ),\r\n    }));\r\n  }, [pagination.numberPerPage, pagination.offset]);\r\n\r\n  const handlePageClick = (event) => {\r\n    const selected = event.selected;\r\n    const offset = selected * pagination.numberPerPage; //10\r\n    console.log(\"Offset in handle click: \" + offset);\r\n    setPagination({ ...pagination, offset });\r\n    // setOffset(offset1);\r\n    console.log(pagination);\r\n  };\r\n\r\n  return (\r\n    // <div style={{ marginLeft: 100, marginRight: 100 }}>\r\n    //   <Table striped bordered hover size=\"sm\">\r\n    //     <thead>\r\n    //       <tr>\r\n    //         <th>#</th>\r\n    //         <th>Full Name</th>\r\n    //         <th>Email</th>\r\n    //         <th>Country</th>\r\n    //         <th>Profile</th>\r\n    //       </tr>\r\n    //     </thead>\r\n    //     <tbody>\r\n    //       {pagination.currentData &&\r\n    //         pagination.currentData.map((item, index) => (\r\n    //           <tr key={index}>\r\n    //             <td>{pagination.offset + (index + 1)}</td>\r\n    //             <td>{item.name.last + \", \" + item.name.first}</td>\r\n    //             <td>{item.email}</td>\r\n    //             <td>{item.location.city + \", \" + item.location.country}</td>\r\n    //             <td>\r\n    //               <Link\r\n    //                 to={{\r\n    //                   pathname: \"./Details\",\r\n    //                   state: { user: item },\r\n    //                 }}\r\n    //               >\r\n    //                 <Button variant=\"link\">Visit Profile</Button>\r\n    //               </Link>\r\n    //             </td>\r\n    //           </tr>\r\n    //         ))}\r\n    //     </tbody>\r\n    //   </Table>\r\n\r\n    //   <ReactPaginate\r\n    //     previousLabel={\"previous\"}\r\n    //     nextLabel={\"next\"}\r\n    //     breakLabel={\"...\"}\r\n    //     pageCount={pagination.pageCount}\r\n    //     marginPagesDisplayed={2}\r\n    //     pageRangeDisplayed={5}\r\n    //     onPageChange={handlePageClick}\r\n    //     containerClassName={\"pagination\"}\r\n    //     activeClassName={\"active\"}\r\n    //   />\r\n    // </div>\r\n\r\n    <MTable data={data} />\r\n  );\r\n};\r\nexport default DataTable;\r\n"]},"metadata":{},"sourceType":"module"}