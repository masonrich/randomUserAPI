{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mason\\\\Projects\\\\clozd_assignment\\\\client\\\\src\\\\App\\\\pages\\\\Main.js\";\nimport React, { Component } from \"react\";\nimport { Button, Spinner } from \"react-bootstrap\";\nimport DataTable from \"../components/DataTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Main extends Component {\n  // Initialize the state\n  constructor(props) {\n    super(props);\n\n    this.getList = async () => {\n      this.setState({\n        loading: true\n      });\n      await fetch(\"/api/getList\").then(res => res.json()).then(list => list.sort((a, b) => a.name.last > b.name.last ? 1 : -1)).then(list => this.setState({\n        usersList: list,\n        loading: false\n      }));\n    };\n\n    this.state = {\n      usersList: [],\n      loading: false\n    };\n  } // Fetch the list on first mount\n\n\n  componentDidMount() {\n    this.getList();\n  } // Retrieves the list of items from the Node (Express) backend\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"List of Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), this.state.loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n        animation: \"border\",\n        variant: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(DataTable, {\n        data: this.state.usersList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/mason/Projects/clozd_assignment/client/src/App/pages/Main.js"],"names":["React","Component","Button","Spinner","DataTable","Main","constructor","props","getList","setState","loading","fetch","then","res","json","list","sort","a","b","name","last","usersList","state","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,iBAAhC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;;AAEA,MAAMC,IAAN,SAAmBJ,SAAnB,CAA6B;AAC3B;AACAK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAcnBC,OAdmB,GAcT,YAAY;AACpB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,YAAMC,KAAK,CAAC,cAAD,CAAL,CACHC,IADG,CACGC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADX,EAEHF,IAFG,CAEGG,IAAD,IAAUA,IAAI,CAACC,IAAL,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACE,IAAF,CAAOC,IAAP,GAAcF,CAAC,CAACC,IAAF,CAAOC,IAArB,GAA4B,CAA5B,GAAgC,CAAC,CAAtD,CAFZ,EAGHR,IAHG,CAGGG,IAAD,IAAU,KAAKN,QAAL,CAAc;AAAEY,QAAAA,SAAS,EAAEN,IAAb;AAAmBL,QAAAA,OAAO,EAAE;AAA5B,OAAd,CAHZ,CAAN;AAID,KApBkB;;AAEjB,SAAKY,KAAL,GAAa;AACXD,MAAAA,SAAS,EAAE,EADA;AAEXX,MAAAA,OAAO,EAAE;AAFE,KAAb;AAID,GAR0B,CAU3B;;;AACAa,EAAAA,iBAAiB,GAAG;AAClB,SAAKf,OAAL;AACD,GAb0B,CAe3B;;;AASAgB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAGG,KAAKF,KAAL,CAAWZ,OAAX,gBACC,QAAC,OAAD;AAAS,QAAA,SAAS,EAAC,QAAnB;AAA4B,QAAA,OAAO,EAAC;AAApC;AAAA;AAAA;AAAA;AAAA,cADD,gBAGC,QAAC,SAAD;AAAW,QAAA,IAAI,EAAE,KAAKY,KAAL,CAAWD;AAA5B;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AApC0B;;AAuC7B,eAAehB,IAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Spinner } from \"react-bootstrap\";\r\nimport DataTable from \"../components/DataTable\";\r\n\r\nclass Main extends Component {\r\n  // Initialize the state\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      usersList: [],\r\n      loading: false,\r\n    };\r\n  }\r\n\r\n  // Fetch the list on first mount\r\n  componentDidMount() {\r\n    this.getList();\r\n  }\r\n\r\n  // Retrieves the list of items from the Node (Express) backend\r\n  getList = async () => {\r\n    this.setState({ loading: true });\r\n    await fetch(\"/api/getList\")\r\n      .then((res) => res.json())\r\n      .then((list) => list.sort((a, b) => (a.name.last > b.name.last ? 1 : -1)))\r\n      .then((list) => this.setState({ usersList: list, loading: false }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>List of Users</h1>\r\n        {/* If loading show spinner, else show data table */}\r\n        {this.state.loading ? (\r\n          <Spinner animation=\"border\" variant=\"primary\" />\r\n        ) : (\r\n          <DataTable data={this.state.usersList} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}