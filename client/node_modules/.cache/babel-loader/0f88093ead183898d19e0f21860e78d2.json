{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mason\\\\Projects\\\\clozd_assignment\\\\client\\\\src\\\\App\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Spinner } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Main from \"./pages/Main\";\nimport Details from \"./pages/Details\";\nimport * as fn from \"./functions/utilities\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [usersList, setUsersList] = useState([]);\n  const [loading, setLoading] = useState(false); //on mount function to call API from backend with page number as\n  //parameter then order the users in the table and set state variables\n\n  useEffect(() => {\n    const getUsers = async () => {\n      setLoading(true);\n      var temp = [];\n      var seed = \"abc\";\n      var greet = fn.greetUser(\"Caden\");\n      console.log(\"Greet: \" + greet); //get the first 3500 users\n      //since we need 7000 users and the API limits to 5000 at a time,\n      //we will need to fetch this API twice\n\n      await fetch(\"/api/getList/\" + seed).then(res => res.json()).then(list => {\n        temp = list;\n      }); //set a new seed to create new, consistent data\n\n      seed = \"def\"; //get the next 3500 users\n\n      await fetch(\"/api/getList/\" + seed).then(res => res.json()).then(list => {\n        temp.push.apply(temp, list); //combine both API call lists\n\n        temp.sort((a, b) => a.name.last > b.name.last ? 1 : -1);\n      });\n      setUsersList(temp);\n      setLoading(false);\n    };\n\n    getUsers();\n  }, []);\n\n  const App = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"mt-5\",\n        children: \"Loading Main Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Spinner, {\n        animation: \"border\",\n        variant: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        component: () => /*#__PURE__*/_jsxDEV(Main, {\n          usersList: usersList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 30\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/details\",\n        component: Details\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"W/cimAIWnnKCj14OxOaQlTN9tQQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/mason/Projects/clozd_assignment/client/src/App/App.js"],"names":["React","Component","useState","useEffect","Route","Switch","Spinner","Main","Details","fn","App","usersList","setUsersList","loading","setLoading","getUsers","temp","seed","greet","greetUser","console","log","fetch","then","res","json","list","push","apply","sort","a","b","name","last"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Spinner } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Main from \"./pages/Main\";\nimport Details from \"./pages/Details\";\n\nimport * as fn from \"./functions/utilities\";\n\nconst App = () => {\n  const [usersList, setUsersList] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  //on mount function to call API from backend with page number as\n  //parameter then order the users in the table and set state variables\n  useEffect(() => {\n    const getUsers = async () => {\n      setLoading(true);\n      var temp = [];\n      var seed = \"abc\";\n\n      var greet = fn.greetUser(\"Caden\");\n\n      console.log(\"Greet: \" + greet);\n\n      //get the first 3500 users\n      //since we need 7000 users and the API limits to 5000 at a time,\n      //we will need to fetch this API twice\n      await fetch(\"/api/getList/\" + seed)\n        .then((res) => res.json())\n        .then((list) => {\n          temp = list;\n        });\n\n      //set a new seed to create new, consistent data\n      seed = \"def\";\n\n      //get the next 3500 users\n      await fetch(\"/api/getList/\" + seed)\n        .then((res) => res.json())\n        .then((list) => {\n          temp.push.apply(temp, list); //combine both API call lists\n          temp.sort((a, b) => (a.name.last > b.name.last ? 1 : -1));\n        });\n\n      setUsersList(temp);\n      setLoading(false);\n    };\n    getUsers();\n  }, []);\n\n  const App = () => (\n    <div className=\"App\">\n      {loading ? (\n        <div>\n          <h4 className={\"mt-5\"}>Loading Main Page</h4>\n          <Spinner animation=\"border\" variant=\"primary\" />\n        </div>\n      ) : (\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            component={() => <Main usersList={usersList} />}\n          />\n          <Route path=\"/details\" component={Details} />\n        </Switch>\n      )}\n    </div>\n  );\n  return (\n    <Switch>\n      <App />\n    </Switch>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}