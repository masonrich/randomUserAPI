{"ast":null,"code":"async function getUserList() {\n  var fullUserList = [];\n  var seed = \"abc\"; //get the first 3500 users\n  //since we need 7000 users and the API limits to 5000 at a time,\n  //we will need to fetch this API twice\n\n  await fetch(\"/api/getList/\" + seed).then(res => res.json()).then(list => {\n    fullUserList = list;\n  }); //set a new seed to create new, consistent data\n\n  seed = \"def\"; //get the next 3500 users\n\n  await fetch(\"/api/getList/\" + seed).then(res => res.json()).then(list => {\n    fullUserList.push.apply(fullUserList, list); //combine both API call user lists\n\n    fullUserList.sort((a, b) => a.name.last > b.name.last ? 1 : -1);\n  });\n  return fullUserList;\n}\n\nexport { getUserList };","map":{"version":3,"sources":["C:/Users/mason/Projects/clozd_assignment/client/src/App/api/users.js"],"names":["getUserList","fullUserList","seed","fetch","then","res","json","list","push","apply","sort","a","b","name","last"],"mappings":"AAAA,eAAeA,WAAf,GAA6B;AAC3B,MAAIC,YAAY,GAAG,EAAnB;AACA,MAAIC,IAAI,GAAG,KAAX,CAF2B,CAI3B;AACA;AACA;;AACA,QAAMC,KAAK,CAAC,kBAAkBD,IAAnB,CAAL,CACHE,IADG,CACGC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADX,EAEHF,IAFG,CAEGG,IAAD,IAAU;AACdN,IAAAA,YAAY,GAAGM,IAAf;AACD,GAJG,CAAN,CAP2B,CAa3B;;AACAL,EAAAA,IAAI,GAAG,KAAP,CAd2B,CAgB3B;;AACA,QAAMC,KAAK,CAAC,kBAAkBD,IAAnB,CAAL,CACHE,IADG,CACGC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADX,EAEHF,IAFG,CAEGG,IAAD,IAAU;AACdN,IAAAA,YAAY,CAACO,IAAb,CAAkBC,KAAlB,CAAwBR,YAAxB,EAAsCM,IAAtC,EADc,CAC+B;;AAC7CN,IAAAA,YAAY,CAACS,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACE,IAAF,CAAOC,IAAP,GAAcF,CAAC,CAACC,IAAF,CAAOC,IAArB,GAA4B,CAA5B,GAAgC,CAAC,CAA9D;AACD,GALG,CAAN;AAOA,SAAOb,YAAP;AACD;;AAED,SAASD,WAAT","sourcesContent":["async function getUserList() {\r\n  var fullUserList = [];\r\n  var seed = \"abc\";\r\n\r\n  //get the first 3500 users\r\n  //since we need 7000 users and the API limits to 5000 at a time,\r\n  //we will need to fetch this API twice\r\n  await fetch(\"/api/getList/\" + seed)\r\n    .then((res) => res.json())\r\n    .then((list) => {\r\n      fullUserList = list;\r\n    });\r\n\r\n  //set a new seed to create new, consistent data\r\n  seed = \"def\";\r\n\r\n  //get the next 3500 users\r\n  await fetch(\"/api/getList/\" + seed)\r\n    .then((res) => res.json())\r\n    .then((list) => {\r\n      fullUserList.push.apply(fullUserList, list); //combine both API call user lists\r\n      fullUserList.sort((a, b) => (a.name.last > b.name.last ? 1 : -1));\r\n    });\r\n\r\n  return fullUserList;\r\n}\r\n\r\nexport { getUserList };\r\n"]},"metadata":{},"sourceType":"module"}