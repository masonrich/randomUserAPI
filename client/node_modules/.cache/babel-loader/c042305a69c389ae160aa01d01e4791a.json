{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mason\\\\Projects\\\\clozd_assignment\\\\client\\\\src\\\\App\\\\components\\\\DataTable2.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport ReactPaginate from \"react-paginate\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport \"../styles/DataTable.css\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n/*\r\n\r\n    NOTE: I got ideas of this Pagination code from https://blog.logrocket.com/4-ways-to-render-large-lists-in-react/   \r\n\r\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DataTable2 = ({\n  data,\n  offset,\n  setOffset\n}) => {\n  _s();\n\n  const [pagination, setPagination] = useState({\n    data: data,\n    offset1: 0,\n    numberPerPage: 10,\n    pageCount: 0,\n    currentData: []\n  });\n  useEffect(() => {\n    setPagination(prevState => ({ ...prevState,\n      pageCount: prevState.data.length / prevState.numberPerPage,\n      //700\n      currentData: prevState.data.slice(pagination.offset1, //10\n      pagination.offset1 + pagination.numberPerPage //20\n      )\n    }));\n  }, [pagination.numberPerPage, pagination.offset1]);\n\n  const handlePageClick = event => {\n    const selected = event.selected;\n    const offset1 = selected * pagination.numberPerPage; //10\n\n    console.log(\"Offset in handle click: \" + offset1);\n    setPagination({ ...pagination,\n      offset1\n    }); // setOffset(offset1);\n  };\n\n  var xxx = data;\n  const [count, setCount] = useState({\n    prev: 0,\n    next: 2550\n  });\n  const [hasMore, setHasMore] = useState(true);\n  const [current, setCurrent] = useState(xxx.slice(count.prev, count.next));\n\n  const getMoreData = () => {\n    if (current.length === xxx.length) {\n      setHasMore(false);\n      return;\n    }\n\n    setTimeout(() => {\n      setCurrent(current.concat(xxx.slice(count.prev + 10, count.next + 10)));\n    }, 2000);\n    setCount(prevState => ({\n      prev: prevState.prev + 10,\n      next: prevState.next + 10\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginLeft: 100,\n      marginRight: 100\n    },\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      size: \"sm\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"#\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Full Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Country\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Profile\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: pagination.currentData && pagination.currentData.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: pagination.offset1 + (index + 1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.name.last + \", \" + item.name.first\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.location.city + \", \" + item.location.country\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: {\n                pathname: \"./Details\",\n                state: {\n                  user: item\n                }\n              },\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"link\",\n                children: \"Visit Profile\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n      previousLabel: \"previous\",\n      nextLabel: \"next\",\n      breakLabel: \"...\",\n      pageCount: pagination.pageCount,\n      marginPagesDisplayed: 2,\n      pageRangeDisplayed: 5,\n      onPageChange: handlePageClick,\n      containerClassName: \"pagination\",\n      activeClassName: \"active\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      dataLength: current.length,\n      next: getMoreData,\n      hasMore: hasMore,\n      loader: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: current && current.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: `${item.name.last}-${item.name.first}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: item.gender\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DataTable2, \"pfupVhlqwjqSbYTqylwW7hK18N8=\");\n\n_c = DataTable2;\nexport default _c2 = /*#__PURE__*/React.memo(DataTable2);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DataTable2\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/mason/Projects/clozd_assignment/client/src/App/components/DataTable2.js"],"names":["React","useState","useEffect","ReactPaginate","Button","Table","Link","InfiniteScroll","DataTable2","data","offset","setOffset","pagination","setPagination","offset1","numberPerPage","pageCount","currentData","prevState","length","slice","handlePageClick","event","selected","console","log","xxx","count","setCount","prev","next","hasMore","setHasMore","current","setCurrent","getMoreData","setTimeout","concat","marginLeft","marginRight","map","item","index","name","last","first","email","location","city","country","pathname","state","user","gender","memo"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport { Button, Table } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../styles/DataTable.css\";\r\n\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\n/*\r\n\r\n    NOTE: I got ideas of this Pagination code from https://blog.logrocket.com/4-ways-to-render-large-lists-in-react/   \r\n\r\n*/\r\nconst DataTable2 = ({ data, offset, setOffset }) => {\r\n  const [pagination, setPagination] = useState({\r\n    data: data,\r\n    offset1: 0,\r\n    numberPerPage: 10,\r\n    pageCount: 0,\r\n    currentData: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    setPagination((prevState) => ({\r\n      ...prevState,\r\n      pageCount: prevState.data.length / prevState.numberPerPage, //700\r\n      currentData: prevState.data.slice(\r\n        pagination.offset1, //10\r\n        pagination.offset1 + pagination.numberPerPage //20\r\n      ),\r\n    }));\r\n  }, [pagination.numberPerPage, pagination.offset1]);\r\n\r\n  const handlePageClick = (event) => {\r\n    const selected = event.selected;\r\n    const offset1 = selected * pagination.numberPerPage; //10\r\n    console.log(\"Offset in handle click: \" + offset1);\r\n    setPagination({ ...pagination, offset1 });\r\n    // setOffset(offset1);\r\n  };\r\n\r\n  var xxx = data;\r\n\r\n  const [count, setCount] = useState({\r\n    prev: 0,\r\n    next: 2550,\r\n  });\r\n  const [hasMore, setHasMore] = useState(true);\r\n  const [current, setCurrent] = useState(xxx.slice(count.prev, count.next));\r\n  const getMoreData = () => {\r\n    if (current.length === xxx.length) {\r\n      setHasMore(false);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      setCurrent(current.concat(xxx.slice(count.prev + 10, count.next + 10)));\r\n    }, 2000);\r\n    setCount((prevState) => ({\r\n      prev: prevState.prev + 10,\r\n      next: prevState.next + 10,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginLeft: 100, marginRight: 100 }}>\r\n      <Table striped bordered hover size=\"sm\">\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Full Name</th>\r\n            <th>Email</th>\r\n            <th>Country</th>\r\n            <th>Profile</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {pagination.currentData &&\r\n            pagination.currentData.map((item, index) => (\r\n              <tr key={index}>\r\n                <td>{pagination.offset1 + (index + 1)}</td>\r\n                <td>{item.name.last + \", \" + item.name.first}</td>\r\n                <td>{item.email}</td>\r\n                <td>{item.location.city + \", \" + item.location.country}</td>\r\n                <td>\r\n                  <Link\r\n                    to={{\r\n                      pathname: \"./Details\",\r\n                      state: { user: item },\r\n                    }}\r\n                  >\r\n                    <Button variant=\"link\">Visit Profile</Button>\r\n                  </Link>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n        </tbody>\r\n      </Table>\r\n\r\n      <ReactPaginate\r\n        previousLabel={\"previous\"}\r\n        nextLabel={\"next\"}\r\n        breakLabel={\"...\"}\r\n        pageCount={pagination.pageCount}\r\n        marginPagesDisplayed={2}\r\n        pageRangeDisplayed={5}\r\n        onPageChange={handlePageClick}\r\n        containerClassName={\"pagination\"}\r\n        activeClassName={\"active\"}\r\n      />\r\n\r\n      <InfiniteScroll\r\n        dataLength={current.length}\r\n        next={getMoreData}\r\n        hasMore={hasMore}\r\n        loader={<h4>Loading...</h4>}\r\n      >\r\n        <div>\r\n          {current &&\r\n            current.map((item, index) => (\r\n              <div key={index}>\r\n                <h3>{`${item.name.last}-${item.name.first}`}</h3>\r\n                <p>{item.gender}</p>\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </InfiniteScroll>\r\n    </div>\r\n  );\r\n};\r\nexport default React.memo(DataTable2);\r\n"]},"metadata":{},"sourceType":"module"}