{"ast":null,"code":"async function getUsers() {\n  var temp = [];\n  var seed = \"abc\"; //get the first 3500 users\n  //since we need 7000 users and the API limits to 5000 at a time,\n  //we will need to fetch this API twice\n\n  await fetch(\"/api/getList/\" + seed).then(res => res.json()).then(list => {\n    temp = list;\n  }); //set a new seed to create new, consistent data\n\n  seed = \"def\"; //get the next 3500 users\n\n  await fetch(\"/api/getList/\" + seed).then(res => res.json()).then(list => {\n    temp.push.apply(temp, list); //combine both API call lists\n\n    temp.sort((a, b) => a.name.last > b.name.last ? 1 : -1);\n  });\n  return temp;\n}\n\nexport { getUsers };","map":{"version":3,"sources":["C:/Users/mason/Projects/clozd_assignment/client/src/App/api/users.js"],"names":["getUsers","temp","seed","fetch","then","res","json","list","push","apply","sort","a","b","name","last"],"mappings":"AAAA,eAAeA,QAAf,GAA0B;AACxB,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,IAAI,GAAG,KAAX,CAFwB,CAIxB;AACA;AACA;;AACA,QAAMC,KAAK,CAAC,kBAAkBD,IAAnB,CAAL,CACHE,IADG,CACGC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADX,EAEHF,IAFG,CAEGG,IAAD,IAAU;AACdN,IAAAA,IAAI,GAAGM,IAAP;AACD,GAJG,CAAN,CAPwB,CAaxB;;AACAL,EAAAA,IAAI,GAAG,KAAP,CAdwB,CAgBxB;;AACA,QAAMC,KAAK,CAAC,kBAAkBD,IAAnB,CAAL,CACHE,IADG,CACGC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADX,EAEHF,IAFG,CAEGG,IAAD,IAAU;AACdN,IAAAA,IAAI,CAACO,IAAL,CAAUC,KAAV,CAAgBR,IAAhB,EAAsBM,IAAtB,EADc,CACe;;AAC7BN,IAAAA,IAAI,CAACS,IAAL,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACE,IAAF,CAAOC,IAAP,GAAcF,CAAC,CAACC,IAAF,CAAOC,IAArB,GAA4B,CAA5B,GAAgC,CAAC,CAAtD;AACD,GALG,CAAN;AAOA,SAAOb,IAAP;AACD;;AAED,SAASD,QAAT","sourcesContent":["async function getUsers() {\r\n  var temp = [];\r\n  var seed = \"abc\";\r\n\r\n  //get the first 3500 users\r\n  //since we need 7000 users and the API limits to 5000 at a time,\r\n  //we will need to fetch this API twice\r\n  await fetch(\"/api/getList/\" + seed)\r\n    .then((res) => res.json())\r\n    .then((list) => {\r\n      temp = list;\r\n    });\r\n\r\n  //set a new seed to create new, consistent data\r\n  seed = \"def\";\r\n\r\n  //get the next 3500 users\r\n  await fetch(\"/api/getList/\" + seed)\r\n    .then((res) => res.json())\r\n    .then((list) => {\r\n      temp.push.apply(temp, list); //combine both API call lists\r\n      temp.sort((a, b) => (a.name.last > b.name.last ? 1 : -1));\r\n    });\r\n\r\n  return temp;\r\n}\r\n\r\nexport { getUsers };\r\n"]},"metadata":{},"sourceType":"module"}