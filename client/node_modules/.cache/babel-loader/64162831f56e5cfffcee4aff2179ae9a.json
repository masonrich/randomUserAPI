{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mason\\\\Projects\\\\clozd_assignment\\\\client\\\\src\\\\App\\\\App.js\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Spinner } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport Main from \"./pages/Main\";\nimport Details from \"./pages/Details\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getUsers = async () => {\n      this.setState({\n        loading: true\n      });\n      var temp = [];\n      var seed = \"abc\"; //get the first 3500 users\n      //since we need 7000 users and the API limits to 5000 at a time,\n      //we will need to fetch this API twice\n\n      await fetch(\"/api/getList/\" + seed).then(res => res.json()).then(list => {\n        temp = list;\n      }); //set a new seed to create new, consistent data\n\n      seed = \"def\"; //get the next 3500 users\n\n      await fetch(\"/api/getList/\" + seed).then(res => res.json()).then(list => {\n        temp.push.apply(temp, list); //combine both API call lists\n\n        temp.sort((a, b) => a.name.last > b.name.last ? 1 : -1);\n      }); //convert data for table usage\n\n      var tempx = [];\n      this.usersList.forEach((user, i) => {\n        var obj = {};\n        obj[\"number\"] = i + 1;\n        obj[\"lastName\"] = user.name.last;\n        obj[\"firstName\"] = user.name.first;\n        obj[\"email\"] = user.email;\n        obj[\"city\"] = user.location.city;\n        obj[\"country\"] = user.location.country;\n        obj[\"button\"] = /*#__PURE__*/_jsxDEV(Link, {\n          to: {\n            pathname: \"./Details\",\n            state: {\n              user: user\n            }\n          },\n          className: \"text-info\",\n          children: \"Visit Profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }, this);\n        tempx.push(obj);\n      });\n      this.setState({\n        usersList: temp,\n        loading: false,\n        tempTable: tempx\n      });\n    };\n\n    this.state = {\n      usersList: [],\n      loading: false,\n      offset: 0,\n      tempTable: []\n    };\n  } //component mount and user retrieval\n\n\n  componentDidMount() {\n    this.getUsers();\n    console.log(\"mounted\");\n  }\n\n  shouldComponentUpdate() {\n    if (this.state.usersList.length) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Switch, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: this.state.loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"mt-5\",\n            children: \"Loading Main Page\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Spinner, {\n            animation: \"border\",\n            variant: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/\",\n            component: () => /*#__PURE__*/_jsxDEV(Main, {\n              usersList: this.state.usersList,\n              temp: this.state.tempTable\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/Details\",\n            component: Details\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/mason/Projects/clozd_assignment/client/src/App/App.js"],"names":["React","Component","useState","useEffect","Route","Switch","Spinner","Link","Main","Details","App","constructor","props","getUsers","setState","loading","temp","seed","fetch","then","res","json","list","push","apply","sort","a","b","name","last","tempx","usersList","forEach","user","i","obj","first","email","location","city","country","pathname","state","tempTable","offset","componentDidMount","console","log","shouldComponentUpdate","length","render"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Spinner } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport Main from \"./pages/Main\";\nimport Details from \"./pages/Details\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      usersList: [],\n      loading: false,\n      offset: 0,\n      tempTable: [],\n    };\n  }\n\n  //component mount and user retrieval\n  componentDidMount() {\n    this.getUsers();\n    console.log(\"mounted\");\n  }\n\n  shouldComponentUpdate() {\n    if (this.state.usersList.length) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  getUsers = async () => {\n    this.setState({ loading: true });\n    var temp = [];\n    var seed = \"abc\";\n\n    //get the first 3500 users\n    //since we need 7000 users and the API limits to 5000 at a time,\n    //we will need to fetch this API twice\n    await fetch(\"/api/getList/\" + seed)\n      .then((res) => res.json())\n      .then((list) => {\n        temp = list;\n      });\n\n    //set a new seed to create new, consistent data\n    seed = \"def\";\n\n    //get the next 3500 users\n    await fetch(\"/api/getList/\" + seed)\n      .then((res) => res.json())\n      .then((list) => {\n        temp.push.apply(temp, list); //combine both API call lists\n        temp.sort((a, b) => (a.name.last > b.name.last ? 1 : -1));\n      });\n\n    //convert data for table usage\n    var tempx = [];\n    this.usersList.forEach((user, i) => {\n      var obj = {};\n      obj[\"number\"] = i + 1;\n      obj[\"lastName\"] = user.name.last;\n      obj[\"firstName\"] = user.name.first;\n      obj[\"email\"] = user.email;\n      obj[\"city\"] = user.location.city;\n      obj[\"country\"] = user.location.country;\n      obj[\"button\"] = (\n        <Link\n          to={{\n            pathname: \"./Details\",\n            state: { user: user },\n          }}\n          className=\"text-info\"\n        >\n          Visit Profile\n        </Link>\n      );\n\n      tempx.push(obj);\n    });\n\n    this.setState({\n      usersList: temp,\n      loading: false,\n      tempTable: tempx,\n    });\n  };\n\n  render() {\n    return (\n      <Switch>\n        <div className=\"App\">\n          {this.state.loading ? (\n            <div>\n              <h4 className={\"mt-5\"}>Loading Main Page</h4>\n              <Spinner animation=\"border\" variant=\"primary\" />\n            </div>\n          ) : (\n            <Switch>\n              <Route\n                exact\n                path=\"/\"\n                component={() => (\n                  <Main\n                    usersList={this.state.usersList}\n                    temp={this.state.tempTable}\n                  />\n                )}\n              />\n              <Route path=\"/Details\" component={Details} />\n            </Switch>\n          )}\n        </div>\n      </Switch>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}