{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mason\\\\Projects\\\\clozd_assignment\\\\client\\\\src\\\\App\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Spinner } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Main from \"./pages/Main\";\nimport Details from \"./pages/Details\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [usersList, setUsersList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [columns, setColumns] = useState({});\n  const [tableData, setTableData] = useState([]); //on mount function to call API from backend with page number as\n  //parameter then order the users in the table and set state variables\n\n  useEffect(() => {\n    const getUsers = async () => {\n      setLoading(true);\n      var temp = [];\n      var seed = \"abc\"; //get the first 3500 users\n      //since we need 7000 users and the API limits to 5000 at a time,\n      //we will need to fetch this API twice\n\n      await fetch(\"/api/getList/\" + seed).then(res => res.json()).then(list => {\n        temp = list;\n      }); //set a new seed to create new, consistent data\n\n      seed = \"def\"; //get the next 3500 users\n\n      await fetch(\"/api/getList/\" + seed).then(res => res.json()).then(list => {\n        temp.push.apply(temp, list); //combine both API call lists\n\n        temp.sort((a, b) => a.name.last > b.name.last ? 1 : -1);\n      }); // setUsersList(temp);\n      // setLoading(false);\n      //////////////////////////////////////////////////////////////////\n\n      const cols = [{\n        title: \"#\",\n        field: \"number\"\n      }, {\n        title: \"Last Name\",\n        field: \"lastName\"\n      }, {\n        title: \"First Name\",\n        field: \"firstName\"\n      }, {\n        title: \"Email\",\n        field: \"email\"\n      }, {\n        title: \"City\",\n        field: \"city\"\n      }, {\n        title: \"Country\",\n        field: \"country\"\n      }, {\n        title: \"Button\",\n        field: \"button\"\n      }]; //convert data for table usage\n\n      var xxx = [];\n      temp.forEach((user, i) => {\n        var obj = {};\n        obj[\"number\"] = i + 1;\n        obj[\"lastName\"] = user.name.last;\n        obj[\"firstName\"] = user.name.first;\n        obj[\"email\"] = user.email;\n        obj[\"city\"] = user.location.city;\n        obj[\"country\"] = user.location.country;\n        obj[\"button\"] = /*#__PURE__*/_jsxDEV(Link, {\n          to: {\n            pathname: \"./Details\",\n            state: {\n              user: user\n            }\n          },\n          className: \"text-info\",\n          children: \"Visit Profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this);\n        xxx.push(obj);\n      });\n      setUsersList(temp);\n      setTableData(xxx);\n      setColumns(cols);\n      setLoading(false);\n    };\n\n    getUsers();\n  }, []);\n\n  const App = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"mt-5\",\n        children: \"Loading Main Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Spinner, {\n        animation: \"border\",\n        variant: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        component: () => /*#__PURE__*/_jsxDEV(Main, {\n          usersList: usersList,\n          tableData: tableData,\n          columns: columns\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/details\",\n        component: Details\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"+ys5K+R340iom3CahzOGBdi6kj8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/mason/Projects/clozd_assignment/client/src/App/App.js"],"names":["React","Component","useState","useEffect","Route","Switch","Spinner","Main","Details","Link","App","usersList","setUsersList","loading","setLoading","columns","setColumns","tableData","setTableData","getUsers","temp","seed","fetch","then","res","json","list","push","apply","sort","a","b","name","last","cols","title","field","xxx","forEach","user","i","obj","first","email","location","city","country","pathname","state"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Spinner } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Main from \"./pages/Main\";\nimport Details from \"./pages/Details\";\n\nimport { Link } from \"react-router-dom\";\n\nconst App = () => {\n  const [usersList, setUsersList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [columns, setColumns] = useState({});\n  const [tableData, setTableData] = useState([]);\n\n  //on mount function to call API from backend with page number as\n  //parameter then order the users in the table and set state variables\n  useEffect(() => {\n    const getUsers = async () => {\n      setLoading(true);\n      var temp = [];\n      var seed = \"abc\";\n\n      //get the first 3500 users\n      //since we need 7000 users and the API limits to 5000 at a time,\n      //we will need to fetch this API twice\n      await fetch(\"/api/getList/\" + seed)\n        .then((res) => res.json())\n        .then((list) => {\n          temp = list;\n        });\n\n      //set a new seed to create new, consistent data\n      seed = \"def\";\n\n      //get the next 3500 users\n      await fetch(\"/api/getList/\" + seed)\n        .then((res) => res.json())\n        .then((list) => {\n          temp.push.apply(temp, list); //combine both API call lists\n          temp.sort((a, b) => (a.name.last > b.name.last ? 1 : -1));\n        });\n\n      // setUsersList(temp);\n      // setLoading(false);\n      //////////////////////////////////////////////////////////////////\n      const cols = [\n        { title: \"#\", field: \"number\" },\n        { title: \"Last Name\", field: \"lastName\" },\n        { title: \"First Name\", field: \"firstName\" },\n        { title: \"Email\", field: \"email\" },\n        { title: \"City\", field: \"city\" },\n        { title: \"Country\", field: \"country\" },\n        { title: \"Button\", field: \"button\" },\n      ];\n\n      //convert data for table usage\n      var xxx = [];\n      temp.forEach((user, i) => {\n        var obj = {};\n        obj[\"number\"] = i + 1;\n        obj[\"lastName\"] = user.name.last;\n        obj[\"firstName\"] = user.name.first;\n        obj[\"email\"] = user.email;\n        obj[\"city\"] = user.location.city;\n        obj[\"country\"] = user.location.country;\n        obj[\"button\"] = (\n          <Link\n            to={{\n              pathname: \"./Details\",\n              state: { user: user },\n            }}\n            className=\"text-info\"\n          >\n            Visit Profile\n          </Link>\n        );\n\n        xxx.push(obj);\n      });\n      setUsersList(temp);\n\n      setTableData(xxx);\n      setColumns(cols);\n\n      setLoading(false);\n    };\n    getUsers();\n  }, []);\n\n  const App = () => (\n    <div className=\"App\">\n      {loading ? (\n        <div>\n          <h4 className={\"mt-5\"}>Loading Main Page</h4>\n          <Spinner animation=\"border\" variant=\"primary\" />\n        </div>\n      ) : (\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            component={() => (\n              <Main\n                usersList={usersList}\n                tableData={tableData}\n                columns={columns}\n              />\n            )}\n          />\n          <Route path=\"/details\" component={Details} />\n        </Switch>\n      )}\n    </div>\n  );\n  return (\n    <Switch>\n      <App />\n    </Switch>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}