{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mason\\\\Projects\\\\clozd_assignment\\\\client\\\\src\\\\App\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Spinner } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Main from \"./pages/Main\";\nimport Details from \"./pages/Details\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [usersList, setUsersList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [offset, setOffset] = useState(0); //on mount function to call API from backend with page number as\n  //parameter then order the users in the table and set state variables\n\n  useEffect(() => {\n    const getUsers = async () => {\n      setLoading(true);\n      var temp = [];\n      var seed = \"abc\"; //get the first 3500 users\n      //since we need 7000 users and the API limits to 5000 at a time,\n      //we will need to fetch this API twice\n\n      await fetch(\"/api/getList/\" + seed).then(res => res.json()).then(list => {\n        temp = list;\n      }); //set a new seed to create new, consistent data\n\n      seed = \"def\"; //get the next 3500 users\n\n      await fetch(\"/api/getList/\" + seed).then(res => res.json()).then(list => {\n        temp.push.apply(temp, list); //combine both API call lists\n\n        temp.sort((a, b) => a.name.last > b.name.last ? 1 : -1);\n      });\n      setUsersList(temp);\n      setLoading(false);\n    };\n\n    getUsers();\n  }, []);\n  const [pagination, setPagination] = useState({\n    data: data,\n    offset: 0,\n    numberPerPage: 10,\n    pageCount: 0,\n    currentData: []\n  });\n  useEffect(() => {\n    setPagination(prevState => ({ ...prevState,\n      pageCount: prevState.data.length / prevState.numberPerPage,\n      //700\n      currentData: prevState.data.slice(pagination.offset, //10\n      pagination.offset + pagination.numberPerPage //20\n      )\n    }));\n  }, [pagination.numberPerPage, pagination.offset]);\n\n  const handlePageClick = event => {\n    const selected = event.selected;\n    const offset = selected * pagination.numberPerPage; //10\n\n    console.log(\"Offset in handle click: \" + offset);\n    setPagination({ ...pagination,\n      offset\n    }); // setOffset(offset1);\n\n    console.log(pagination);\n  };\n\n  const App = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"mt-5\",\n        children: \"Loading Main Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Spinner, {\n        animation: \"border\",\n        variant: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        component: () => /*#__PURE__*/_jsxDEV(Main, {\n          usersList: usersList,\n          pagination: pagination,\n          setPagination: setPagination\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/details\",\n        component: Details\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"1uHI/gvLytShucsClAXVxHr9qEE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/mason/Projects/clozd_assignment/client/src/App/App.js"],"names":["React","Component","useState","useEffect","Route","Switch","Spinner","Main","Details","App","usersList","setUsersList","loading","setLoading","offset","setOffset","getUsers","temp","seed","fetch","then","res","json","list","push","apply","sort","a","b","name","last","pagination","setPagination","data","numberPerPage","pageCount","currentData","prevState","length","slice","handlePageClick","event","selected","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,kBAA9B;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,OAAP,MAAoB,iBAApB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,CAAD,CAApC,CAHgB,CAKhB;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,QAAQ,GAAG,YAAY;AAC3BH,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAII,IAAI,GAAG,EAAX;AACA,UAAIC,IAAI,GAAG,KAAX,CAH2B,CAK3B;AACA;AACA;;AACA,YAAMC,KAAK,CAAC,kBAAkBD,IAAnB,CAAL,CACHE,IADG,CACGC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADX,EAEHF,IAFG,CAEGG,IAAD,IAAU;AACdN,QAAAA,IAAI,GAAGM,IAAP;AACD,OAJG,CAAN,CAR2B,CAc3B;;AACAL,MAAAA,IAAI,GAAG,KAAP,CAf2B,CAiB3B;;AACA,YAAMC,KAAK,CAAC,kBAAkBD,IAAnB,CAAL,CACHE,IADG,CACGC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADX,EAEHF,IAFG,CAEGG,IAAD,IAAU;AACdN,QAAAA,IAAI,CAACO,IAAL,CAAUC,KAAV,CAAgBR,IAAhB,EAAsBM,IAAtB,EADc,CACe;;AAC7BN,QAAAA,IAAI,CAACS,IAAL,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACE,IAAF,CAAOC,IAAP,GAAcF,CAAC,CAACC,IAAF,CAAOC,IAArB,GAA4B,CAA5B,GAAgC,CAAC,CAAtD;AACD,OALG,CAAN;AAOAnB,MAAAA,YAAY,CAACM,IAAD,CAAZ;AACAJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KA3BD;;AA4BAG,IAAAA,QAAQ;AACT,GA9BQ,EA8BN,EA9BM,CAAT;AAgCA,QAAM,CAACe,UAAD,EAAaC,aAAb,IAA8B9B,QAAQ,CAAC;AAC3C+B,IAAAA,IAAI,EAAEA,IADqC;AAE3CnB,IAAAA,MAAM,EAAE,CAFmC;AAG3CoB,IAAAA,aAAa,EAAE,EAH4B;AAI3CC,IAAAA,SAAS,EAAE,CAJgC;AAK3CC,IAAAA,WAAW,EAAE;AAL8B,GAAD,CAA5C;AAQAjC,EAAAA,SAAS,CAAC,MAAM;AACd6B,IAAAA,aAAa,CAAEK,SAAD,KAAgB,EAC5B,GAAGA,SADyB;AAE5BF,MAAAA,SAAS,EAAEE,SAAS,CAACJ,IAAV,CAAeK,MAAf,GAAwBD,SAAS,CAACH,aAFjB;AAEgC;AAC5DE,MAAAA,WAAW,EAAEC,SAAS,CAACJ,IAAV,CAAeM,KAAf,CACXR,UAAU,CAACjB,MADA,EACQ;AACnBiB,MAAAA,UAAU,CAACjB,MAAX,GAAoBiB,UAAU,CAACG,aAFpB,CAEkC;AAFlC;AAHe,KAAhB,CAAD,CAAb;AAQD,GATQ,EASN,CAACH,UAAU,CAACG,aAAZ,EAA2BH,UAAU,CAACjB,MAAtC,CATM,CAAT;;AAWA,QAAM0B,eAAe,GAAIC,KAAD,IAAW;AACjC,UAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAvB;AACA,UAAM5B,MAAM,GAAG4B,QAAQ,GAAGX,UAAU,CAACG,aAArC,CAFiC,CAEmB;;AACpDS,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAA6B9B,MAAzC;AACAkB,IAAAA,aAAa,CAAC,EAAE,GAAGD,UAAL;AAAiBjB,MAAAA;AAAjB,KAAD,CAAb,CAJiC,CAKjC;;AACA6B,IAAAA,OAAO,CAACC,GAAR,CAAYb,UAAZ;AACD,GAPD;;AASA,QAAMtB,GAAG,GAAG,mBACV;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,cACGG,OAAO,gBACN;AAAA,8BACE;AAAI,QAAA,SAAS,EAAE,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,OAAD;AAAS,QAAA,SAAS,EAAC,QAAnB;AAA4B,QAAA,OAAO,EAAC;AAApC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADM,gBAMN,QAAC,MAAD;AAAA,8BACE,QAAC,KAAD;AACE,QAAA,KAAK,MADP;AAEE,QAAA,IAAI,EAAC,GAFP;AAGE,QAAA,SAAS,EAAE,mBACT,QAAC,IAAD;AACE,UAAA,SAAS,EAAEF,SADb;AAEE,UAAA,UAAU,EAAEqB,UAFd;AAGE,UAAA,aAAa,EAAEC;AAHjB;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,cADF,eAYE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,SAAS,EAAExB;AAAlC;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,UADF;;AAyBA,sBACE,QAAC,MAAD;AAAA,2BACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAjGD;;GAAMC,G;;KAAAA,G;AAmGN,eAAeA,GAAf","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Spinner } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Main from \"./pages/Main\";\nimport Details from \"./pages/Details\";\n\nconst App = () => {\n  const [usersList, setUsersList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [offset, setOffset] = useState(0);\n\n  //on mount function to call API from backend with page number as\n  //parameter then order the users in the table and set state variables\n  useEffect(() => {\n    const getUsers = async () => {\n      setLoading(true);\n      var temp = [];\n      var seed = \"abc\";\n\n      //get the first 3500 users\n      //since we need 7000 users and the API limits to 5000 at a time,\n      //we will need to fetch this API twice\n      await fetch(\"/api/getList/\" + seed)\n        .then((res) => res.json())\n        .then((list) => {\n          temp = list;\n        });\n\n      //set a new seed to create new, consistent data\n      seed = \"def\";\n\n      //get the next 3500 users\n      await fetch(\"/api/getList/\" + seed)\n        .then((res) => res.json())\n        .then((list) => {\n          temp.push.apply(temp, list); //combine both API call lists\n          temp.sort((a, b) => (a.name.last > b.name.last ? 1 : -1));\n        });\n\n      setUsersList(temp);\n      setLoading(false);\n    };\n    getUsers();\n  }, []);\n\n  const [pagination, setPagination] = useState({\n    data: data,\n    offset: 0,\n    numberPerPage: 10,\n    pageCount: 0,\n    currentData: [],\n  });\n\n  useEffect(() => {\n    setPagination((prevState) => ({\n      ...prevState,\n      pageCount: prevState.data.length / prevState.numberPerPage, //700\n      currentData: prevState.data.slice(\n        pagination.offset, //10\n        pagination.offset + pagination.numberPerPage //20\n      ),\n    }));\n  }, [pagination.numberPerPage, pagination.offset]);\n\n  const handlePageClick = (event) => {\n    const selected = event.selected;\n    const offset = selected * pagination.numberPerPage; //10\n    console.log(\"Offset in handle click: \" + offset);\n    setPagination({ ...pagination, offset });\n    // setOffset(offset1);\n    console.log(pagination);\n  };\n\n  const App = () => (\n    <div className=\"App\">\n      {loading ? (\n        <div>\n          <h4 className={\"mt-5\"}>Loading Main Page</h4>\n          <Spinner animation=\"border\" variant=\"primary\" />\n        </div>\n      ) : (\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            component={() => (\n              <Main\n                usersList={usersList}\n                pagination={pagination}\n                setPagination={setPagination}\n              />\n            )}\n          />\n          <Route path=\"/details\" component={Details} />\n        </Switch>\n      )}\n    </div>\n  );\n  return (\n    <Switch>\n      <App />\n    </Switch>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}