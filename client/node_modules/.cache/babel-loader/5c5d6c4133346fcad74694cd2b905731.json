{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mason\\\\Projects\\\\clozd_assignment\\\\client\\\\src\\\\App\\\\App.js\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Spinner } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Main from \"./pages/Main\";\nimport Details from \"./pages/Details\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getUsers = async () => {\n      this.setState({\n        loading: true\n      });\n      var temp = [];\n      var seed = \"abc\"; //get the first 3500 users\n      //since we need 7000 users and the API limits to 5000 at a time,\n      //we will need to fetch this API twice\n\n      await fetch(\"/api/getList/\" + seed).then(res => res.json()).then(list => {\n        temp = list;\n      }); //set a new seed to create new, consistent data\n\n      seed = \"def\"; //get the next 3500 users\n\n      await fetch(\"/api/getList/\" + seed).then(res => res.json()).then(list => {\n        temp.push.apply(temp, list); //combine both API call lists\n\n        temp.sort((a, b) => a.name.last > b.name.last ? 1 : -1);\n      });\n      this.setState({\n        usersList: temp,\n        loading: false\n      });\n    };\n\n    this.state = {\n      usersList: [],\n      loading: false,\n      offset: 0\n    };\n  } //component mount and user retrieval\n\n\n  componentDidMount() {\n    this.getUsers();\n    console.log(\"mounted\");\n  }\n\n  shouldComponentUpdate() {\n    if (usersList != null) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Switch, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: this.state.loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"mt-5\",\n            children: \"Loading Main Page\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Spinner, {\n            animation: \"border\",\n            variant: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/\",\n            component: () => /*#__PURE__*/_jsxDEV(Main, {\n              usersList: this.state.usersList\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 34\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/Details\",\n            component: Details\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/mason/Projects/clozd_assignment/client/src/App/App.js"],"names":["React","Component","useState","useEffect","Route","Switch","Spinner","Main","Details","App","constructor","props","getUsers","setState","loading","temp","seed","fetch","then","res","json","list","push","apply","sort","a","b","name","last","usersList","state","offset","componentDidMount","console","log","shouldComponentUpdate","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,kBAA9B;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,OAAP,MAAoB,iBAApB;;;AAEA,MAAMC,GAAN,SAAkBT,KAAK,CAACC,SAAxB,CAAkC;AAChCS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAuBnBC,QAvBmB,GAuBR,YAAY;AACrB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAIC,IAAI,GAAG,EAAX;AACA,UAAIC,IAAI,GAAG,KAAX,CAHqB,CAKrB;AACA;AACA;;AACA,YAAMC,KAAK,CAAC,kBAAkBD,IAAnB,CAAL,CACHE,IADG,CACGC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADX,EAEHF,IAFG,CAEGG,IAAD,IAAU;AACdN,QAAAA,IAAI,GAAGM,IAAP;AACD,OAJG,CAAN,CARqB,CAcrB;;AACAL,MAAAA,IAAI,GAAG,KAAP,CAfqB,CAiBrB;;AACA,YAAMC,KAAK,CAAC,kBAAkBD,IAAnB,CAAL,CACHE,IADG,CACGC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADX,EAEHF,IAFG,CAEGG,IAAD,IAAU;AACdN,QAAAA,IAAI,CAACO,IAAL,CAAUC,KAAV,CAAgBR,IAAhB,EAAsBM,IAAtB,EADc,CACe;;AAC7BN,QAAAA,IAAI,CAACS,IAAL,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACE,IAAF,CAAOC,IAAP,GAAcF,CAAC,CAACC,IAAF,CAAOC,IAArB,GAA4B,CAA5B,GAAgC,CAAC,CAAtD;AACD,OALG,CAAN;AAOA,WAAKf,QAAL,CAAc;AAAEgB,QAAAA,SAAS,EAAEd,IAAb;AAAmBD,QAAAA,OAAO,EAAE;AAA5B,OAAd;AACD,KAjDkB;;AAEjB,SAAKgB,KAAL,GAAa;AACXD,MAAAA,SAAS,EAAE,EADA;AAEXf,MAAAA,OAAO,EAAE,KAFE;AAGXiB,MAAAA,MAAM,EAAE;AAHG,KAAb;AAKD,GAR+B,CAUhC;;;AACAC,EAAAA,iBAAiB,GAAG;AAClB,SAAKpB,QAAL;AACAqB,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD;;AAEDC,EAAAA,qBAAqB,GAAG;AACtB,QAAIN,SAAS,IAAI,IAAjB,EAAuB;AACrB,aAAO,KAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF;;AA8BDO,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,MAAD;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,kBACG,KAAKN,KAAL,CAAWhB,OAAX,gBACC;AAAA,kCACE;AAAI,YAAA,SAAS,EAAE,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,OAAD;AAAS,YAAA,SAAS,EAAC,QAAnB;AAA4B,YAAA,OAAO,EAAC;AAApC;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,gBAMC,QAAC,MAAD;AAAA,kCACE,QAAC,KAAD;AACE,YAAA,KAAK,MADP;AAEE,YAAA,IAAI,EAAC,GAFP;AAGE,YAAA,SAAS,EAAE,mBAAM,QAAC,IAAD;AAAM,cAAA,SAAS,EAAE,KAAKgB,KAAL,CAAWD;AAA5B;AAAA;AAAA;AAAA;AAAA;AAHnB;AAAA;AAAA;AAAA;AAAA,kBADF,eAME,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,UAAZ;AAAuB,YAAA,SAAS,EAAErB;AAAlC;AAAA;AAAA;AAAA;AAAA,kBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAqBD;;AA1E+B;;AA4ElC,eAAeC,GAAf","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Spinner } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Main from \"./pages/Main\";\nimport Details from \"./pages/Details\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      usersList: [],\n      loading: false,\n      offset: 0,\n    };\n  }\n\n  //component mount and user retrieval\n  componentDidMount() {\n    this.getUsers();\n    console.log(\"mounted\");\n  }\n\n  shouldComponentUpdate() {\n    if (usersList != null) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  getUsers = async () => {\n    this.setState({ loading: true });\n    var temp = [];\n    var seed = \"abc\";\n\n    //get the first 3500 users\n    //since we need 7000 users and the API limits to 5000 at a time,\n    //we will need to fetch this API twice\n    await fetch(\"/api/getList/\" + seed)\n      .then((res) => res.json())\n      .then((list) => {\n        temp = list;\n      });\n\n    //set a new seed to create new, consistent data\n    seed = \"def\";\n\n    //get the next 3500 users\n    await fetch(\"/api/getList/\" + seed)\n      .then((res) => res.json())\n      .then((list) => {\n        temp.push.apply(temp, list); //combine both API call lists\n        temp.sort((a, b) => (a.name.last > b.name.last ? 1 : -1));\n      });\n\n    this.setState({ usersList: temp, loading: false });\n  };\n\n  render() {\n    return (\n      <Switch>\n        <div className=\"App\">\n          {this.state.loading ? (\n            <div>\n              <h4 className={\"mt-5\"}>Loading Main Page</h4>\n              <Spinner animation=\"border\" variant=\"primary\" />\n            </div>\n          ) : (\n            <Switch>\n              <Route\n                exact\n                path=\"/\"\n                component={() => <Main usersList={this.state.usersList} />}\n              />\n              <Route path=\"/Details\" component={Details} />\n            </Switch>\n          )}\n        </div>\n      </Switch>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}